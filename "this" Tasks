
// Task 01
// Дан объект someObj, реализуйте функцию greeting и присвойте ее ключу объекта с аналогичным именем.
// Функция должна вернуть строку `My name is ${name}. I am ${age}`, где name и age берутся из свойств объекта




let someObj = {
    name: 'Eugene',
    age: 32,
    greeting()  {
        return `My name is ${this.name}. I am ${this.age}`
    }
}

// Task 02
// реализовать счетчик counter в виде объекта со следующими методами:
// get current count; - выводит текущее значение счетчика
// increment; - увеличивает значение счетчика на 1
// decrement; - уменьшает значение счетчика на 1
// set current count; - принимает и присваивает значение счетчику
// rest current count - устанавливает значение счетчика равным 0
// все методы должны ссылаться на сам объект

let counter = {
    count: 0,
    getCurrentCount () {
        return this.count
    },
    increment () {
        this.count++
    },
    decrement () {
        this.count--
    },
    setCurrentCount (newCount) {
        this.count = newCount
    },
    resetCurrentCount () {
        this.count = 0
    }
}


// Task 03
// переделайте код из Task 02, что бы сработал следующий код:
// counter.setCurrentCount(10).increment().increment().increment().decrement().getCurrentCount() // 12

let counter2 = {
    count: 0,
    getCurrentCount () {
        return this.count
    },
    increment () {
        this.count++
        return this
    },
    decrement () {
        this.count--
        return this
    },
    setCurrentCount (newCount) {
        this.count = newCount
        return this
    },
    resetCurrentCount () {
        this.count = 0
        return this
    }
}


// Task 04
// Написать функцию конструктор myFirstConstructorFunc которая принимает 2 параметра name и age и возвращает объект
// у которого будут эти свойства и метод greeting из Task 01


function greeting()  {
    return `My name is ${this.name}. I am ${this.age}`
}
function MyFirstConstructorFunc(name, age) {
    this.name = name
    this.age = age
    this.greeting = greeting
}

let user = new  MyFirstConstructorFunc("Ilya", 23)

// Task 05 есть 2 объекта One и Two. С помощью bind и метода sayHello заставьте поздороваться объект One

let One = {name: 'One'};
let Two = {name: 'Two', sayHello: function() {console.log(`Hello, my name is ${this.name}`)}};

Two.sayHello.bind(One)()
Two.sayHello.call(One)

// Task 06
// создайте объект helperObj у которого есть следующие методы:
// changeName - меняет значение у свойства name объекта на полученное значение
// setAge - устанавливает полученное значение в свойство age объекта
// greeting - используется функция sayHello из Task 05
// можно использовать @ts-ignore

let helperObj = {
    name: "",
    age: 0,
    changeName (newName) {
        this.name = newName
    },
    setAge (newAge) {
        this.age = newAge
    },
    greeting () {
        console.log(`Hello, my name is ${this.name}. I am ${this.age}`)
    }
}


helperObj.changeName("Ilya")
helperObj.setAge(25)
helperObj.greeting()


// Bind
// 1) Дана функция sumTwoNumbers, реализовать функцию bindNumber которая принимает функцию sumTwoNumbers и число, и
// возвращает другую функцию, которое также принимает число и возвращает сумму этих чисел. Замыкание использовать нельзя
function sumTwoNumbers(a:number,b:number):number {return a + b};
function bindNumber(foo, num) {
    return foo.bind(this, num)
}
console.log(bindNumber(sumTwoNumbers, 15)(10))

// 2) Напишите функцию которая принимает первым аргументом объект One, а вторым helperObj. Данная функция
// возвращает другую функцию которая принимает строку в качестве аргумента и устанавливает ее свойству name объекта One
function foo (One, helperObj) {
    return function boo (str) {
        helperObj.changeName.bind(One)("Hey")
        // helperObj.changeName.call(One, "Hey")
    }
}
foo(One, helperObj)("Hey")
console.log(One.name)
// 3) Одной строкой установить с помощью helperObj объекту Two поле age в значение 30

helperObj.setAge.bind(Two)(30)
helperObj.setAge.call(Two, 30)
// 4) Создать метод hi у объекта One, который всегда вызывает метод greeting объекта helperObj от имени Two

let One2 = {
    name: 'One',
    hi () {
        helperObj.greeting.bind(Two)()
        // helperObj.greeting.call(Two)
    }
};
One2.hi()
// Реализовать задачи 2-4 из Bind с помощью Call
